name: Continuous Integration and Delivery
on: [push, pull_request]
jobs:
  install:
    name: 'Installing NPM modules'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Caching NPM modules if necessary'
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: ./node_modules
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci
  lint:
    name: 'Linting'
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Restoring NPM modules from cache'
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm run lint
  build-libs:
    name: 'Building Libs'
    needs: install
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.root-package-json.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: 'Reading package.json version of project root'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/package-json@master
        id: root-package-json
        with:
          path: package.json
      - name: 'Reading package.json version of scion/workbench'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/package-json@master
        id: workbench-package-json
        with:
          path: projects/scion/workbench/package.json
      - name: 'Reading package.json version of scion/dimension'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/package-json@master
        id: dimension-package-json
        with:
          path: projects/scion/dimension/package.json
      - name: 'Reading package.json version of scion/viewport'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/package-json@master
        id: viewport-package-json
        with:
          path: projects/scion/viewport/package.json
      - name: 'Asserting package.json versions to be equal'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/equality-checker@master
        with:
          values: |
            ${{ steps.root-package-json.outputs.version }},
            ${{ steps.workbench-package-json.outputs.version }},
            ${{ steps.dimension-package-json.outputs.version }},
            ${{ steps.viewport-package-json.outputs.version }}
      - name: 'Restoring NPM modules from cache'
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: 'Building @scion/dimension'
        run: npm run dimension:build
      - name: 'Building @scion/viewport'
        run: npm run viewport:build
      - name: 'Building @scion/workbench'
        run: npm run workbench:build
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
  build-apps:
    name: 'Building Apps'
    needs: build-libs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          - name: workbench-testing-app-localhost
            cmd: npm run workbench-testing-app-localhost:build
    steps:
      - uses: actions/checkout@v2
      - name: 'Restoring NPM modules from cache'
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: 'Downloading workbench (dist)'
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: 'Building ${{ matrix.app.name }}'
        run: ${{ matrix.app.cmd }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.app.name }}
          path: dist/${{ matrix.app.name }}
  test:
    name: 'Unit Testing'
    needs: build-libs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Downloading workbench (dist)'
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: 'Restoring NPM modules from cache'
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm run test:headless
  e2e:
    name: 'E2E Testing'
    needs: [build-libs, build-apps]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        suite:
          - name: workbench
            project: workbench
          - name: router
            project: workbench
          - name: routerlink
            project: workbench
          - name: activity
            project: workbench
          - name: defaultView
            project: workbench
          - name: viewpartAction
            project: workbench
          - name: viewTabbar
            project: workbench
    steps:
      - uses: actions/checkout@v2
      - name: 'Downloading workbench (dist)'
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: 'Downloading app: workbench-testing-app-localhost (dist)'
        uses: actions/download-artifact@v2
        with:
          name: workbench-testing-app-localhost
          path: dist/workbench-testing-app-localhost
      - name: 'Restoring NPM modules from cache'
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm run e2e:${{ matrix.suite.project }}:headless -- --suite ${{ matrix.suite.name }}
  release-guard:
    name: 'Should release?'
    if: github.ref == 'refs/heads/master'
    needs:
      - build-libs
      - build-apps
      - lint
      - test
      - e2e
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.tag-release-commit.outputs.is-release-commit }}
    steps:
      - uses: actions/checkout@v2
      - name: 'If release commit present, add release tag'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/tag-release-commit@master
        id: tag-release-commit
        with:
          release-commit-message-pattern: 'release: v(.*)'
          expected-version: ${{ needs.build-libs.outputs.version }}
  release:
    name: 'Releasing'
    if: ${{ needs.release-guard.outputs.should-release == 'true' }}
    needs: [release-guard, build-libs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Downloading workbench (dist)'
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: 'Restoring NPM modules from cache'
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: 'Publishing @scion/workbench to NPM'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/npm-publish@master
        with:
          dist-folder: dist/scion/workbench
          npm-token: ${{ secrets.NPM_TOKEN }}
          dry-run: false
      - name: 'Publishing @scion/dimension to NPM'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/npm-publish@master
        with:
          dist-folder: dist/scion/dimension
          npm-token: ${{ secrets.NPM_TOKEN }}
          dry-run: false
      - name: 'Publishing @scion/viewport to NPM'
        uses: SchweizerischeBundesbahnen/scion-toolkit/.github/actions/npm-publish@master
        with:
          dist-folder: dist/scion/viewport
          npm-token: ${{ secrets.NPM_TOKEN }}
          dry-run: false
