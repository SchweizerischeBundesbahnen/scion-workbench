:host {
  --ɵdialog-transform-translate-x: 0;
  --ɵdialog-transform-translate-y: 0;
  --ɵdialog-min-height: initial;
  --ɵdialog-height: initial;
  --ɵdialog-max-height: initial;
  --ɵdialog-min-width: initial;
  --ɵdialog-width: initial;
  --ɵdialog-max-width: initial;
  --ɵdialog-padding: var(--sci-workbench-dialog-padding);

  &.justified {
    --ɵdialog-padding: 0;
  }

  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative; // positioning context for the dialog pane

  > div.dialog {
    display: flex;
    flex-direction: column;
    position: absolute;
    top: 3%;
    color: var(--sci-color-text);
    transform: translateX(calc(1px * var(--ɵdialog-transform-translate-x))) translateY(calc(1px * var(--ɵdialog-transform-translate-y)));
    min-height: var(--ɵdialog-min-height);
    height: var(--ɵdialog-height);
    max-height: var(--ɵdialog-max-height);
    min-width: var(--ɵdialog-min-width);
    width: var(--ɵdialog-width);
    max-width: var(--ɵdialog-max-width);
    outline: none;
    // Enable pointer events because disabled on CDK overlay (div.cdk-overlay-pane.wb-dialog-modality-context).
    pointer-events: auto;

    > div.dialog-box {
      flex: auto;
      display: flex;
      flex-direction: column;
      gap: calc(1.25 * var(--ɵdialog-padding));
      // An element with rounded corners must hide content overflow so that the content does not overlap the corners.
      // However, the resize handles should still overlap for better accessibility. Therefore, we use this extra DIV to
      // set the border and overflow properties.
      border: 1px solid var(--sci-color-border);
      border-radius: var(--sci-corner);
      background-color: var(--sci-color-background-elevation);
      box-shadow: var(--sci-elevation) var(--sci-static-color-black);
      overflow: hidden;

      > header {
        flex: none;

        &.divider {
          border-bottom: 1px solid var(--sci-color-border);
        }
      }

      > sci-viewport {
        flex: auto;

        &::part(content) {
          padding-inline: var(--ɵdialog-padding);
        }
      }

      > footer {
        flex: none;

        &.divider {
          border-top: 1px solid var(--sci-color-border);
        }
      }
    }

    &.blinking {
      animation-duration: 50ms;
      animation-iteration-count: infinite;
      animation-name: blink-animation;

      @keyframes blink-animation {
        from {
          transform: translateX(calc(calc(1px * var(--ɵdialog-transform-translate-x)) - 2px)) translateY(calc(calc(1px * var(--ɵdialog-transform-translate-y)) - 1px));
        }
        to {
          transform: translateX(calc(calc(1px * var(--ɵdialog-transform-translate-x)) + 2px)) translateY(calc(calc(1px * var(--ɵdialog-transform-translate-y)) + 1px));
        }
      }
    }
  }
}
