:host {
  --ɵpart-bar-indent-left: 0;
  --ɵpart-bar-indent-right: 0;
  --ɵpart-bar-drag-source-width: 0;
  --ɵpart-bar-drag-placeholder-width: 0;

  display: grid;

  > sci-viewport {

    &::part(content) {
      display: flex;
      padding-left: var(--ɵpart-bar-indent-left);

      // Pseudo-element to apply right padding, as setting it directly on ::part(content) has no effect on viewport overflow.
      // Otherwise, the last view tab, if active and using rounded tab corners, would be cropped on viewport overflow.
      &:after {
        flex: none;
        width: var(--ɵpart-bar-indent-right);
        content: '';
      }
    }

    > wb-view-tab {
      flex: none;

      &.drag-source {
        display: none;
      }
    }

    > div.divider {
      flex: none;
      display: flex;
      position: relative; // positioning context for the :after pseudo element, which actually renders the divider as an overlay
      width: 0; // divider must not occupy space

      &:after {
        flex: none;
        align-self: center;
        content: '';
        position: absolute;
        width: 1px;
        left: -1px;
        height: 65%;
        background-color: var(--sci-workbench-part-bar-divider-color);
      }
    }

    > div.drag-placeholder {
      flex: none;
      width: var(--ɵpart-bar-drag-placeholder-width);
    }

    // Shift drop target and subsequent tabs and dividers to the right.
    > wb-view-tab.drop-target, wb-view-tab.drop-target ~ :is(wb-view-tab, div.divider), > div.divider:has(+ wb-view-tab.drop-target) {
      transform: translateX(var(--ɵpart-bar-drag-source-width));
    }

    // Do not render divider following the active tab or drag source.
    > wb-view-tab:is(.active, .drag-source) + div.divider {
      display: none;
    }

    // Do not render divider preceding the active tab
    > div.divider:has(+ wb-view-tab.active:not(.drag-source)) {
      display: none;
    }

    // Do not render divider preceding the tab being dragged out of its tabbar
    > div.divider:has(+ wb-view-tab.drag-source:not(.active)) {
      display: none;
    }
  }

  // Do not set right indent if the tabbar has no (visible) tabs, such as when dragging the last tab out of the tabbar.
  &:not(.drag-over) > sci-viewport:not(:has(wb-view-tab:not(.drag-source)))::part(content):after {
    display: none;
  }

  // Animate shifting tabs during drag and drop.
  &.on-drag-enter:not(.on-drag-start), &.drag-over, &.on-drag-leave {
    wb-view-tab, div.divider {
      transition: transform 175ms cubic-bezier(0, 0, 0.2, 1);
    }
  }

  // Animate the drag placeholder when entering or leaving the tabbar, but not when dragging over the tabbar, for instant feedback.
  &.on-drag-enter:not(.on-drag-start), &.on-drag-leave {
    div.drag-placeholder {
      transition: width 175ms cubic-bezier(0, 0, 0.2, 1);
    }
  }

  // Display drag placeholder only after updated the DOM with the drag source and/or drop target,
  // preventing flickering because the drag source and drop target are set via Angular binding while
  // the placeholder width is set directly via DOM update.
  &:not(:has(wb-view-tab.drag-source)):not(:has(wb-view-tab.drop-target)):not(.drag-over) {
    div.drag-placeholder {
      display: none;
    }
  }

  // Disable pointer events on the tabbar for a smoother drag and drop experience.
  // Without this, crossing tab boundaries triggers unnecessary dragleave/dragenter events,
  // causing flickering of the drag effect and preventing accurate tab drop when quickly swapping tabs.
  &.pointer-events-disabled > sci-viewport::part(content) {
    pointer-events: none;
  }

  > div.tab-corner-radius {
    position: absolute; // out of document flow
    visibility: hidden; // must not be `display:none` to have an effective size
    width: var(--sci-workbench-tab-border-radius);
  }
}
